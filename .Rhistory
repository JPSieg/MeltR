b <- {}
d <- {}
n <- Tm_smooth
for (i in 1:length(unique(a$Well))){
b <- subset(a, Well == unique(a$Well)[i])
Well <- unique(a$Well)[i]
A[i] <- b$A[1]
B[i] <- b$B[1]
x <- c()
y <- c()
for (j in n:length(b$Temperature)){
y[j] <- (b$Emission[j] - b$Emission[(j-(n-1))])/(b$Temperature[j] - b$Temperature[j-(n-1)])
x[j] <- mean(b$Temperature[(j - n + 1):j])
}
d[[i]] <- data.frame("Well" = Well,
"Temperature" = x,
"A" = b$A[1],
"B" = b$B[1],
"First.derivative" = y)
Tm[i] <- x[which(y == max(y, na.rm = TRUE))]
}
e <- d[[1]]
for (i in 2:length(d)){
e <- rbind(e, d[[i]])
}
Tm_data <- e
Tm_summary <- data.frame("Well" = unique(a$Well),
"A" = A,
"B" = B,
"Tm" = Tm)
Tm_summary$invT <- 1/(273.15 + Tm_summary$Tm)
if (Save_results == "all"){
pdf(paste(file_path, "/", file_prefix, "_first_derivative.pdf", sep = ""),
width = 3, height = 3, pointsize = 0.25)
plot(Tm_data$Temperature, Tm_data$First.derivative,
xlab = "Temperature" ~ (degree ~ C), ylab = "dF/dT",
cex.lab = 1.5, cex.axis = 1.25, cex = 0.8)
dev.off()
}
####Method 1 Fit individual isotherms####
a <- {}
fit <- {}
temp <- c()
K <- c()
Fmax <- c()
Fmin <- c()
SE.K <- c()
for (i in c(1:length(unique(data_frame$Reading)))){
a[[i]] <- subset(data_frame, Reading == unique(data_frame$Reading)[i])
Start_fit <- list(K = Start_K, Fmax = Fmax.start[i], Fmin = Fmin.start[i])
tryCatch({
fit[[i]] <- nls(Emission ~ Individual(K, Fmax, Fmin, A, B), low =0,
algorithm = 'port', start = Start_fit, data = a[[i]])
temp[i] <- a[[i]]$Temperature[1]
K[i] <- coef(fit[[i]])[1]
SE.K[i] <- summary(fit[[i]])$coefficients[1,2]
Fmax[i] <- coef(fit[[i]])[2]
Fmin[i] <- coef(fit[[i]])[3]
}, error = function(e){
temp[i] <- a[[i]]$Temperature[1]
K[i] <- NA
SE.K[i] <- NA
Fmax[i] <- NA
Fmin[i] <- NA
})}
indvfits <- data.frame("Temperature" =  temp,
"K" = K,
"SE.K" = SE.K,
"Fmax" = Fmax,
"Fmin" = Fmin)
indvfits$invT <- 1/(273.15 + indvfits$Temperature)
indvfits$lnK <- log((10^-9)*indvfits$K)
indvfits$SE.lnK <- indvfits$SE.K/indvfits$K
if(length(K_range) > 1){
indvfits.to.fit <- indvfits[which(dplyr::between(indvfits$K, K_range[1], K_range[2])), ]
}else{
indvfits.to.fit <- indvfits
}
vh_start = list(H = -70, S = -0.180)
if (is.na(K_error[1]) == FALSE){
if (length(which(indvfits.to.fit$SE.lnK <= K_error[1])) <= 5){
print(paste("Only ", length(which(indvfits.to.fit$SE.lnK <= K_error[1])), " isotherms have an acceptable K error. Try increasing the tolerance threshold.", sep = ""))
}
vh_plot_fit <- nls(lnK~Tmodels$VantHoff(H, S, Temperature),
start = vh_start,
data = indvfits.to.fit[which(indvfits.to.fit$SE.lnK <= K_error[1]),])
}
if (is.na(K_error[1]) == TRUE){
vh_plot_fit <- nls(lnK~Tmodels$VantHoff(H, S, Temperature),
start = vh_start,
data = indvfits.to.fit)
}
if (Save_results == "all"){
pdf(paste(file_path, "/", file_prefix, "_method_1_VH_plot.pdf", sep = ""),
width = 3, height = 3, pointsize = 0.25)
plot(indvfits$invT, indvfits$lnK,
xlab = "1/Temperature" ~ (degree ~ C), ylab = "ln[ K ]",
cex.lab = 1.5, cex.axis = 1.25, cex = 0.8)
for(i in c(1:length(indvfits$Temperature))){
arrows(y0 = indvfits$lnK[i] - indvfits$SE.lnK[i], y1 = indvfits$lnK[i] + indvfits$SE.lnK[i],
x0 = indvfits$invT[i], x1 = indvfits$invT[i],
length=0.02, angle=90, code = 3)
}
lines(indvfits$invT, Tmodels$VantHoff(H = coef(vh_plot_fit)[1], S = coef(vh_plot_fit)[2], Temperature = indvfits$Temperature), col = "red")
dev.off()
}
VH_plot_summary <- list(round(coef(vh_plot_fit)[1], 1), round(summary(vh_plot_fit)$coefficients[1,2], 1),
round(1000*coef(vh_plot_fit)[2], 1), round(1000*summary(vh_plot_fit)$coefficients[2,2], 1),
round(calcG(coef(vh_plot_fit)[1], coef(vh_plot_fit)[2]), 1), round(calcG.SE(summary(vh_plot_fit)$coefficients[1,2], summary(vh_plot_fit)$coefficients[2,2], summary(vh_plot_fit)$cov.unscaled[1,2]*(summary(vh_plot_fit)$sigma^2)), 1))
names(VH_plot_summary) <- c("H", "SE.H", "S", "SE.S", "G", "SE.G")
VH_plot_summary <- data.frame(VH_plot_summary)
####Method 2 Global fit####
gfit_data <- data.frame("Helix" = c(), "Well" = c(), "Reading" = c(),
"Temperature" = c(), "B" = c(), "A" = c(), "Emission" = c(), "K" = c(), "index" = c())
#Filter data by K error
if (is.na(K_error[2]) == FALSE){
for (i in which(indvfits$SE.lnK <= K_error[1])){
a <- subset(data_frame, Reading == i)
a$K <- indvfits$K[i]
a$index <- i
gfit_data <- rbind(gfit_data, a)
}
}
if (is.na(K_error[2]) == TRUE){
gfit_data <- data_frame
}
#Filter data by K range
if (length(K_range) > 1){
gfit_data <- gfit_data[which(dplyr::between(gfit_data$K, K_range[1], K_range[2])), ]
}
b <- data.frame("Helix" = c(), "Well" = c(), "Reading" = c(),
"Temperature" = c(), "B" = c(), "A" = c(), "Emission" = c(), "K" = c(), "index" = c())
for (i in c(1:length(unique(gfit_data$Reading)))){
a <- subset(gfit_data, Reading == unique(gfit_data$Reading)[i])
a$Reading <- i
b <- rbind(b, a)
}
gfit_data <- b
if (is.na(K_error[2]) == FALSE){
gfit_start = list(H = VH_plot_summary$H, S = VH_plot_summary$S/1000, Fmax = Fmax[unique(gfit_data$index)], Fmin = Fmin[unique(gfit_data$index)])
}
if (length(K_range) > 1){
gfit_start = list(H = VH_plot_summary$H, S = VH_plot_summary$S/1000, Fmax = Fmax[unique(gfit_data$index)], Fmin = Fmin[unique(gfit_data$index)])
}
if (is.na(K_error[2]) == TRUE){
gfit_start = list(H = VH_plot_summary$H, S = VH_plot_summary$S/1000, Fmax = Fmax, Fmin = Fmin)
}
gfit <- nls(Emission ~ Global(H, S, Fmax, Fmin, Reading, A, B, Temperature),
start = gfit_start,
data = gfit_data)
if (Save_results == "all"){
pdf(paste(file_path, "/", file_prefix, "_method_2_Gfit_plot.pdf", sep = ""),
width = 3, height = 3, pointsize = 0.25)
plot(gfit_data$B, gfit_data$Emission,
xlab = "[Quencher] (nM)", ylab = "Emission",
cex.lab = 1.5, cex.axis = 1.25, cex = 0.8)
for (i in c(1:length(unique(gfit_data$Reading)))){
a <- subset(gfit_data, Reading == unique(gfit_data$Reading)[i])
lines(c(1:ceiling(max(a$B))), Global(H = coef(gfit)[1],
S = coef(gfit)[2],
Fmax = coef(gfit)[i + 2],
Fmin = coef(gfit)[i + 2 + length(unique(gfit_data$Reading))],
A = a$A[1],
B = c(1:ceiling(max(a$B))),
Temperature = a$Temperature[1]),
col = "red")
}
dev.off()
}
Gfit_summary <- list(round(coef(gfit)[1], 1), round(summary(gfit)$coefficients[1,2], 1),
round(1000*coef(gfit)[2], 1), round(1000*summary(gfit)$coefficients[2,2], 1),
round(calcG(coef(gfit)[1], coef(gfit)[2]), 1), round(calcG.SE(summary(gfit)$coefficients[1,2], summary(gfit)$coefficients[2,2], summary(gfit)$cov.unscaled[1,2]*(summary(gfit)$sigma^2)), 1))
names(Gfit_summary) <- c("H", "SE.H", "S", "SE.S", "G", "SE.G")
Gfit_summary <- data.frame(Gfit_summary)
####Fit to a Kirchoff thermodynamic model Method 1####
if (Tmodel == "Kirchoff"){
KC_start = list(H = Gfit_summary$H, S = Gfit_summary$S/1000, C = 0)
KC_plot_fit <- nls(lnK ~ Tmodels$Kirchoff(H, S, C, Temperature),
start = KC_start,
data = indvfits[which(indvfits$SE.lnK <= K_error[1]),])
summary(KC_plot_fit)
if (Save_results == "all"){
pdf(paste(file_path, "/", file_prefix, "_method_2_KC_plot.pdf", sep = ""),
width = 3, height = 3, pointsize = 0.25)
plot(indvfits$invT, indvfits$lnK,
xlab = "1/Temperature" ~ (degree ~ C), ylab = "ln[ K ]",
cex.lab = 1.5, cex.axis = 1.25, cex = 0.8)
for(i in c(1:length(indvfits$Temperature))){
arrows(y0 = indvfits$lnK[i] - indvfits$SE.lnK[i], y1 = indvfits$lnK[i] + indvfits$SE.lnK[i],
x0 = indvfits$invT[i], x1 = indvfits$invT[i],
length=0.02, angle=90, code = 3)
}
lines(indvfits$invT, Tmodels$Kirchoff(H = coef(KC_plot_fit)[1], S = coef(KC_plot_fit)[2], C = coef(KC_plot_fit)[3], Temperature = indvfits$Temperature), col = "blue")
lines(indvfits$invT, Tmodels$VantHoff(H = coef(vh_plot_fit)[1], S = coef(vh_plot_fit)[2], Temperature = indvfits$Temperature), col = "red")
dev.off()
}
KC_plot_summary <- list(round(coef(KC_plot_fit)[1], 1), round(summary(KC_plot_fit)$coefficients[1,2], 1),
round(1000*coef(KC_plot_fit)[2], 1), round(1000*summary(KC_plot_fit)$coefficients[2,2], 1),
round(1000*coef(KC_plot_fit)[3], 1), round(1000*summary(KC_plot_fit)$coefficients[3,2], 1),
round(calcG(coef(KC_plot_fit)[1], coef(KC_plot_fit)[2]), 1), round(calcG.SE(summary(KC_plot_fit)$coefficients[1,2], summary(KC_plot_fit)$coefficients[2,2], summary(KC_plot_fit)$cov.unscaled[1,2]*(summary(KC_plot_fit)$sigma^2)), 1))
names(KC_plot_summary) <- c("H", "SE.H", "S", "SE.S", "C", "SE.C", "G", "SE.G")
KC_plot_summary <- data.frame(KC_plot_summary)
}
####Fit to a Kirchoff thermodynamic model Method 2####
if (Tmodel == "Kirchoff"){
Global.KC = function(H, S, C, Fmax, Fmin, Reading, A, B, Temperature){
K <- (10^9)*exp(Tmodels$Kirchoff(H = H, S = S, C = C, Temperature = Temperature))
f <- Mmodel(K = K, A = A, B = B)
model <- Fmax[Reading] + (Fmin[Reading] - Fmax[Reading])*f
return(model)
}
gfit_data <- data.frame("Helix" = c(), "Well" = c(), "Reading" = c(),
"Temperature" = c(), "B" = c(), "A" = c(), "Emission" = c())
for (i in which(indvfits$SE.lnK <= K_error[2])){
gfit_data <- rbind(gfit_data, subset(data_frame, Reading == i))
}
b <- data.frame("Helix" = c(), "Well" = c(), "Reading" = c(),
"Temperature" = c(), "B" = c(), "A" = c(), "Emission" = c())
for (i in c(1:length(unique(gfit_data$Reading)))){
a <- subset(gfit_data, Reading == unique(gfit_data$Reading)[i])
a$Reading <- i
b <- rbind(b, a)
}
gfit_data <- b
gfit_start.KC = list(H = VH_plot_summary$H, S = VH_plot_summary$S/1000, C = 0, Fmax = Fmax[which(indvfits$SE.lnK <= K_error[2])], Fmin = Fmin[which(indvfits$SE.lnK <= K_error[2])])
gfit.KC <- nls(Emission ~ Global.KC(H, S, C, Fmax, Fmin, Reading, A, B, Temperature),
start = gfit_start.KC,
data = gfit_data)
summary(gfit.KC)
if (Save_results == "all"){
pdf(paste(file_path, "/", file_prefix, "_KC_method_2_Gfit_plot.pdf", sep = ""),
width = 3, height = 3, pointsize = 0.25)
plot(gfit_data$B, gfit_data$Emission,
xlab = "[Quencher] (nM)", ylab = "Emission",
cex.lab = 1.5, cex.axis = 1.25, cex = 0.8)
for (i in c(1:length(unique(gfit_data$Reading)))){
a <- subset(gfit_data, Reading == unique(gfit_data$Reading)[i])
lines(c(1:ceiling(max(a$B))), Global.KC(H = coef(gfit.KC)[1],
S = coef(gfit.KC)[2],
C = coef(gfit.KC)[3],
Fmax = coef(gfit.KC)[i + 3],
Fmin = coef(gfit.KC)[i + 3 + length(unique(gfit_data$Reading))],
A = a$A[1],
B = c(1:ceiling(max(a$B))),
Temperature = a$Temperature[1]),
col = "red")
}
dev.off()
}
Gfit.KC_summary <- list(round(coef(gfit.KC)[1], 1), round(summary(gfit.KC)$coefficients[1,2], 1),
round(1000*coef(gfit.KC)[2], 1), round(1000*summary(gfit.KC)$coefficients[2,2], 1),
round(1000*coef(gfit.KC)[3], 1), round(1000*summary(gfit)$coefficients[3,2], 1),
round(calcG(coef(gfit.KC)[1], coef(gfit.KC)[2]), 1), 1) #round(calcG.SE(summary(gfit.KC)$coefficients[1,2], summary(gfit.KC)$coefficients[2,2], summary(gfit.KC)$cov.unscaled[1,2]*(summary(gfit.KC)$sigma^2)), 1))
names(Gfit.KC_summary) <- c("H", "SE.H", "S", "SE.S", "C", "SE.C", "G", "SE.G")
Gfit.KC_summary <- data.frame(Gfit.KC_summary)
}
####Method 3 1/Tm versus B analysis####
####Save results####
output <- {}
output[[1]] <- rbind(VH_plot_summary, Gfit_summary)
row.names(output[[1]]) <- c(1:2)
output[[1]] <- cbind(data.frame("Method" =c("1 VH plot", "2 Global fit")), output)
print("Van't Hoff")
print(paste("accurate Ks = ", length(indvfits[which(indvfits$SE.lnK <= K_error[1]),]$SE.lnK), sep = ""))
print(output[[1]])
if (Save_results != "none"){
write.table(output, paste(file_path, "/", file_prefix, "_VH_summary.csv", sep = ""), sep = ",", row.names = FALSE)
}
output[[2]] <- data.frame("Temperature" = indvfits$Temperature,
"K" = 1/((10^-9)*indvfits$K),
"SE.K" = ((10^9)*indvfits$SE.K)/(indvfits$K^2),
"Fmax" = indvfits$Fmax,
"Fmin" = indvfits$Fmin)
output[[3]] <- vh_plot_fit
output[[4]] <- gfit
output[[5]] <- data_frame
output[[6]] <- Tm_data
output[[7]] <- Tm_summary
if (Optimize_B_conc == TRUE){
output[[8]] <- R
}
if (Optimize_B_conc == FALSE){
output[[8]] <- NA
}
output[[9]] <- data.frame("H" = abs((range(output[[1]]$H)[1] - range(output[[1]]$H)[2])/mean(output[[1]]$H)),
"S" = abs((range(output[[1]]$S)[1] - range(output[[1]]$S)[2])/mean(output[[1]]$S)),
"G" = abs((range(output[[1]]$G)[1] - range(output[[1]]$G)[2])/mean(output[[1]]$G)))
print("Fractional error between methods")
print(output[[9]])
names(output) <- c("VantHoff",
"K",
"VH_method_1_fit",
"VH_method_2_fit",
"Raw_data",
"First_derivative",
"Tms",
"R",
"Fractional_error_between_methods")
if (Tmodel == "Kirchoff"){
output[[10]] <- rbind(KC_plot_summary, Gfit.KC_summary)
row.names(output[[10]]) <- c(1:2)
output[[10]] <- cbind(data.frame("Method" =c("1 KC plot", "2 Global fit")), output[[5]])
print("Kirchoff")
print(paste("accurate Ks = ", length(indvfits[which(indvfits$SE.lnK <= K_error[2]),]$SE.lnK), sep = ""))
print(output[[10]])
output[[11]] <- KC_plot_fit
output[[12]] <- gfit.KC
names(output) <- c("VantHoff",
"K",
"VH_method_1_fit",
"VH_method_2_fit",
"Raw_data",
"First_derivative",
"Tms",
"R",
"Fractional_error_between_methods",
"Kirchoff",
"KC_method_1_fit",
"KC_method_2_fit")
}
output <- output
}
fit[[5]] <- meltR.F(data[[5]],
K_error = c(0.5, 0.5),
low_K = 0.01,
K_range = c(10, 50), #need to apply a custom K range to this data Kd = 5 to 500 nM
Save_results = "all",
file_path = "Helix_E",
file_prefix = "Helix_E")
fit[[5]] <- meltR.F(data[[5]],
K_error = c(0.5, 0.5),
low_K = 0.01,
K_range = c(5, 50), #need to apply a custom K range to this data Kd = 5 to 500 nM
Save_results = "all",
file_path = "Helix_E",
file_prefix = "Helix_E")
fit[[5]] <- meltR.F(data[[5]],
K_error = c(0.5, 0.5),
low_K = 0.01,
K_range = c(10, 500), #need to apply a custom K range to this data Kd = 5 to 500 nM
Save_results = "all",
file_path = "Helix_E",
file_prefix = "Helix_E")
fit[[5]]$K$Kd <- (10^9)/(fit[[5]]$K$K)
fit[[5]]$K$SE.lnK <- fit[[5]]$K$SE.K/fit[[5]]$K$K
fit[[5]]$K
plot(fit[[5]]$Temperature, fit[[5]]$K)
plot(fit[[5]]$K$Temperature, fit[[5]]$K$Kd)
plot(fit[[5]]$K$Temperature, log(fit[[5]]$K$Kd, 10))
q()
remove.packages("devtools")
install.packages("devtools")
remove.packages("MeltR")
remove.packages("MeltR")
devtools::document()
q()
setwd("~/Jacob/Research/js5-2021/js5001_Purify_FAM-OLIGOs_for_thermodynamics")
setwd("~/Jacob/Research/js5-2021/js5001_Purify_FAM-OLIGOs_for_thermodynamics")
library(tidyverse)
list.files()
list.files("Chromatogram_data")
con = file("Chromatogram_data/js5001_210121_FAM_F_1_16684.arw")
read_lines(con)
close(con)
read.csv("Chromatogram_data/js5001_210121_FAM_F_1_16684.arw")
list.files("Chromatogram_data")
list.files("Chromatogram_data/280nM_data")
read.csv("Chromatogram_data/280nM_data/js5001_210121_FAM_F_1_16684.arw")
list.files("Chromatogram_data/280nM_data")
read.csv("Chromatogram_data/280nM_data/js5001_210121_FAM_F_1_16682.arw")
df <- read.csv(x)
x = "Chromatogram_data/280nM_data/js5001_210121_FAM_F_1_16682.arw"
df <- read.csv(x)
strsplit("x")
strsplit(x)
strsplit(x, split = "_")
which(paste("Chromatogram_data/280nM_data", list.files("Chromatogram_data/280nM_data"), sep = "/") == x)
df$Injection <- which(paste("Chromatogram_data/280nM_data", list.files("Chromatogram_data/280nM_data"), sep = "/") == x)
paste("Chromatogram_data/280nM_data", list.files("Chromatogram_data/280nM_data")
paste("Chromatogram_data/280nM_data", list.files("Chromatogram_data/280nM_data"), sep = "/")
paste("Chromatogram_data/280nM_data", list.files("Chromatogram_data/280nM_data"), sep = "/")
list.df.280 <- lapply(paste("Chromatogram_data/280nM_data", list.files("Chromatogram_data/280nM_data"), sep = "/"), FUN = read.chromatogram.280)
read.chromatogram.280 = function(x){
df <- read.csv(x)
colnames(df) <- c("Time", "Absorbance")
df$RNA <- paste(strsplit(x, split = "_")[[1]][5], strsplit(x, split = "_")[[1]][5], sep = "-")
df$Injection <- which(paste("Chromatogram_data/280nM_data", list.files("Chromatogram_data/280nM_data"), sep = "/") == x)
output <- df
}
list.df.280 <- lapply(paste("Chromatogram_data/280nM_data", list.files("Chromatogram_data/280nM_data"), sep = "/"), FUN = read.chromatogram.280)
df.280 <- bind_rows(list.df.280)
head(df.280)
read.chromatogram.280 = function(x){
df <- read.csv(x)[-1,]
colnames(df) <- c("Time", "Absorbance")
df$RNA <- paste(strsplit(x, split = "_")[[1]][5], strsplit(x, split = "_")[[1]][5], sep = "-")
df$Injection <- which(paste("Chromatogram_data/280nM_data", list.files("Chromatogram_data/280nM_data"), sep = "/") == x)
df$Time <- as.numeric(df$Time)
df$Absorbance <- as.numeric(df$Absorbance)
output <- df
}
list.df.280 <- lapply(paste("Chromatogram_data/280nM_data", list.files("Chromatogram_data/280nM_data"), sep = "/"), FUN = read.chromatogram.280)
df.280 <- bind_rows(list.df.280)
head(df.280)
read.chromatogram.280 = function(x){
df <- read.csv(x)[-1,]
colnames(df) <- c("Time", "Absorbance")
df$RNA <- paste(strsplit(x, split = "_")[[1]][5], strsplit(x, split = "_")[[1]][5], sep = "-")
df$Injection <- which(paste("Chromatogram_data/280nM_data", list.files("Chromatogram_data/280nM_data"), sep = "/") == x)
df$Time <- as.numeric(as.character(df$Time))
df$Absorbance <- as.numeric(as.character(df$Absorbance))
output <- df
}
list.df.280 <- lapply(paste("Chromatogram_data/280nM_data", list.files("Chromatogram_data/280nM_data"), sep = "/"), FUN = read.chromatogram.280)
df.280 <- bind_rows(list.df.280)
head(df.280)
ggplot(df.280, aes(x = Time, y = Absorbance)) +
geom_line()
ggplot(df.280, aes(x = Time, y = Absorbance, group = Injection)) +
geom_line()
ggplot(df.280, aes(x = Time, y = Absorbance, group = Injection, color = RNA)) +
geom_line()
x = "Chromatogram_data/280nM_data/js5001_210121_FAM_F_1_16682.arw"
df <- read.csv(x)[-1,]
colnames(df) <- c("Time", "Absorbance")
df$RNA <- paste(strsplit(x, split = "_")[[1]][5], strsplit(x, split = "_")[[1]][5], sep = "-")
df$Injection <- which(paste("Chromatogram_data/280nM_data", list.files("Chromatogram_data/280nM_data"), sep = "/") == x)
df$Injection
x = "Chromatogram_data/280nM_data/js5001_210121_FAM_F_1_16682.arw"
read.chromatogram.280 = function(x){
df <- read.csv(x)[-1,]
colnames(df) <- c("Time", "Absorbance")
df$RNA <- paste(strsplit(x, split = "_")[[1]][5], strsplit(x, split = "_")[[1]][6], sep = "-")
df$Injection <- which(paste("Chromatogram_data/280nM_data", list.files("Chromatogram_data/280nM_data"), sep = "/") == x)
df$Time <- as.numeric(as.character(df$Time))
df$Absorbance <- as.numeric(as.character(df$Absorbance))
output <- df
}
list.df.280 <- lapply(paste("Chromatogram_data/280nM_data", list.files("Chromatogram_data/280nM_data"), sep = "/"), FUN = read.chromatogram.280)
df.280 <- bind_rows(list.df.280)
head(df.280)
ggplot(df.280, aes(x = Time, y = Absorbance, group = Injection, color = RNA)) +
geom_line()
ggplot(df.280, aes(x = Time, y = Absorbance, group = Injection, color = RNA)) +
geom_line() +
scale_color_manual(values = viridis::viridis(length(unique(df.280$RNA))))
ggplot(df.280, aes(x = Time, y = Absorbance, group = Injection, color = RNA)) +
geom_line() +
scale_color_manual(values = viridis::viridis(length(unique(df.280$RNA)))) +
theme_classic()
ggsave("280_nm_chromatogram.png", scale = 2.5, height = 4, height = 3)
ggsave("280_nm_chromatogram.png", scale = 2.5, width = 4, height = 3)
head(df.280)
read.chromatogram.280 = function(x){
df <- read.csv(x)[-1,]
colnames(df) <- c("Time", "Absorbance")
df$RNA <- paste(strsplit(x, split = "_")[[1]][5], strsplit(x, split = "_")[[1]][6], sep = "-")
df$Injection <- which(paste("Chromatogram_data/470nM_data", list.files("Chromatogram_data/470nM_data"), sep = "/") == x)
df$Time <- as.numeric(as.character(df$Time))
df$Absorbance <- as.numeric(as.character(df$Absorbance))
output <- df
}
list.df.280 <- lapply(paste("Chromatogram_data/470nM_data", list.files("Chromatogram_data/470nM_data"), sep = "/"), FUN = read.chromatogram.280)
list.df.470 <- lapply(paste("Chromatogram_data/470nM_data", list.files("Chromatogram_data/470nM_data"), sep = "/"), FUN = read.chromatogram.280)
df.470 <- bind_rows(list.df.470)
head(df.470)
ggplot(df.470, aes(x = Time, y = Absorbance, group = Injection, color = RNA)) +
geom_line() +
scale_color_manual(values = viridis::viridis(length(unique(df.280$RNA)))) +
theme_classic()
ggsave("470_nm_chromatogram.png", scale = 2.5, width = 4, height = 3)
read.chromatogram.280 = function(x){
df <- read.csv(x)[-1,]
colnames(df) <- c("Time", "Absorbance")
df$RNA <- paste(strsplit(x, split = "_")[[1]][5], strsplit(x, split = "_")[[1]][6], sep = "-")
df$Injection <- which(paste("Chromatogram_data/280nM_data", list.files("Chromatogram_data/280nM_data"), sep = "/") == x)
df$Time <- as.numeric(as.character(df$Time))
df$Absorbance <- as.numeric(as.character(df$Absorbance))
output <- df
}
list.df.280 <- lapply(paste("Chromatogram_data/280nM_data", list.files("Chromatogram_data/280nM_data"), sep = "/"), FUN = read.chromatogram.280)
df.280 <- bind_rows(list.df.280)
head(df.280)
ggplot(df.280, aes(x = Time, y = Absorbance, group = Injection, color = RNA)) +
geom_line() +
scale_color_manual(values = viridis::viridis(length(unique(df.280$RNA)))) +
theme_classic()
ggsave("280_nm_chromatogram.png", scale = 2.5, width = 4, height = 3)
read.chromatogram.470 = function(x){
df <- read.csv(x)[-1,]
colnames(df) <- c("Time", "Absorbance")
df$RNA <- paste(strsplit(x, split = "_")[[1]][5], strsplit(x, split = "_")[[1]][6], sep = "-")
df$Injection <- which(paste("Chromatogram_data/470nM_data", list.files("Chromatogram_data/470nM_data"), sep = "/") == x)
df$Time <- as.numeric(as.character(df$Time))
df$Absorbance <- as.numeric(as.character(df$Absorbance))
output <- df
}
list.df.470 <- lapply(paste("Chromatogram_data/470nM_data", list.files("Chromatogram_data/470nM_data"), sep = "/"), FUN = read.chromatogram.470)
df.470 <- bind_rows(list.df.470)
head(df.470)
ggplot(df.470, aes(x = Time, y = Absorbance, group = Injection, color = RNA)) +
geom_line() +
scale_color_manual(values = viridis::viridis(length(unique(df.280$RNA)))) +
theme_classic()
ggsave("470_nm_chromatogram.png", scale = 2.5, width = 4, height = 3)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
