names(KC_plot_summary) <- c("H", "SE.H", "S", "SE.S", "C", "SE.C", "G", "SE.G")
KC_plot_summary <- data.frame(KC_plot_summary)
}
####Fit to a Kirchoff thermodynamic model Method 2####
if (Tmodel == "Kirchoff"){
Global.KC = function(H, S, C, Fmax, Fmin, Reading, A, B, Temperature){
K <- (10^9)*exp(Tmodels$Kirchoff(H = H, S = S, C = C, Temperature = Temperature))
f <- Mmodel(K = K, A = A, B = B)
model <- Fmax[Reading] + (Fmin[Reading] - Fmax[Reading])*f
return(model)
}
gfit_data <- data.frame("Helix" = c(), "Well" = c(), "Reading" = c(),
"Temperature" = c(), "B" = c(), "A" = c(), "Emission" = c())
for (i in which(indvfits$SE.lnK <= K_error[2])){
gfit_data <- rbind(gfit_data, subset(data_frame, Reading == i))
}
b <- data.frame("Helix" = c(), "Well" = c(), "Reading" = c(),
"Temperature" = c(), "B" = c(), "A" = c(), "Emission" = c())
for (i in c(1:length(unique(gfit_data$Reading)))){
a <- subset(gfit_data, Reading == unique(gfit_data$Reading)[i])
a$Reading <- i
b <- rbind(b, a)
}
gfit_data <- b
gfit_start.KC = list(H = VH_plot_summary$H, S = VH_plot_summary$S/1000, C = 0, Fmax = Fmax[which(indvfits$SE.lnK <= K_error[2])], Fmin = Fmin[which(indvfits$SE.lnK <= K_error[2])])
gfit.KC <- nls(Emission ~ Global.KC(H, S, C, Fmax, Fmin, Reading, A, B, Temperature),
start = gfit_start.KC,
data = gfit_data)
summary(gfit.KC)
if (Save_results == "all"){
pdf(paste(file_path, "/", file_prefix, "_KC_method_2_Gfit_plot.pdf", sep = ""),
width = 3, height = 3, pointsize = 0.25)
plot(gfit_data$B, gfit_data$Emission,
xlab = "[Quencher] (nM)", ylab = "Emission",
cex.lab = 1.5, cex.axis = 1.25, cex = 0.8)
for (i in c(1:length(unique(gfit_data$Reading)))){
a <- subset(gfit_data, Reading == unique(gfit_data$Reading)[i])
lines(c(1:ceiling(max(a$B))), Global.KC(H = coef(gfit.KC)[1],
S = coef(gfit.KC)[2],
C = coef(gfit.KC)[3],
Fmax = coef(gfit.KC)[i + 3],
Fmin = coef(gfit.KC)[i + 3 + length(unique(gfit_data$Reading))],
A = a$A[1],
B = c(1:ceiling(max(a$B))),
Temperature = a$Temperature[1]),
col = "red")
}
dev.off()
}
Gfit.KC_summary <- list(round(coef(gfit.KC)[1], 1), round(summary(gfit.KC)$coefficients[1,2], 1),
round(1000*coef(gfit.KC)[2], 1), round(1000*summary(gfit.KC)$coefficients[2,2], 1),
round(1000*coef(gfit.KC)[3], 1), round(1000*summary(gfit)$coefficients[3,2], 1),
round(calcG(coef(gfit.KC)[1], coef(gfit.KC)[2]), 1), 1) #round(calcG.SE(summary(gfit.KC)$coefficients[1,2], summary(gfit.KC)$coefficients[2,2], summary(gfit.KC)$cov.unscaled[1,2]*(summary(gfit.KC)$sigma^2)), 1))
names(Gfit.KC_summary) <- c("H", "SE.H", "S", "SE.S", "C", "SE.C", "G", "SE.G")
Gfit.KC_summary <- data.frame(Gfit.KC_summary)
}
####Method 3 1/Tm versus B analysis####
####Save results####
output <- {}
output[[1]] <- rbind(VH_plot_summary, Gfit_summary)
row.names(output[[1]]) <- c(1:2)
output[[1]] <- cbind(data.frame("Method" =c("1 VH plot", "2 Global fit")), output)
print("Van't Hoff")
print(paste("accurate Ks = ", length(indvfits[which(indvfits$SE.lnK <= K_error[1]),]$SE.lnK), sep = ""))
print(output[[1]])
if (Save_results != "none"){
write.table(output, paste(file_path, "/", file_prefix, "_VH_summary.csv", sep = ""), sep = ",", row.names = FALSE)
}
output[[2]] <- data.frame("Temperature" = indvfits$Temperature,
"K" = 1/((10^-9)*indvfits$K),
"SE.K" = ((10^9)*indvfits$SE.K)/(indvfits$K^2),
"Fmax" = indvfits$Fmax,
"Fmin" = indvfits$Fmin)
output[[3]] <- vh_plot_fit
output[[4]] <- gfit
output[[5]] <- data_frame
output[[6]] <- Tm_data
output[[7]] <- Tm_summary
if (Optimize_B_conc == TRUE){
output[[8]] <- R
}
if (Optimize_B_conc == FALSE){
output[[8]] <- NA
}
output[[9]] <- data.frame("H" = abs((range(output[[1]]$H)[1] - range(output[[1]]$H)[2])/mean(output[[1]]$H)),
"S" = abs((range(output[[1]]$S)[1] - range(output[[1]]$S)[2])/mean(output[[1]]$S)),
"G" = abs((range(output[[1]]$G)[1] - range(output[[1]]$G)[2])/mean(output[[1]]$G)))
print("Fractional error between methods")
print(output[[9]])
names(output) <- c("VantHoff",
"K",
"VH_method_1_fit",
"VH_method_2_fit",
"Raw_data",
"First_derivative",
"Tms",
"R",
"Fractional_error_between_methods")
if (Tmodel == "Kirchoff"){
output[[10]] <- rbind(KC_plot_summary, Gfit.KC_summary)
row.names(output[[10]]) <- c(1:2)
output[[10]] <- cbind(data.frame("Method" =c("1 KC plot", "2 Global fit")), output[[5]])
print("Kirchoff")
print(paste("accurate Ks = ", length(indvfits[which(indvfits$SE.lnK <= K_error[2]),]$SE.lnK), sep = ""))
print(output[[10]])
output[[11]] <- KC_plot_fit
output[[12]] <- gfit.KC
names(output) <- c("VantHoff",
"K",
"VH_method_1_fit",
"VH_method_2_fit",
"Raw_data",
"First_derivative",
"Tms",
"R",
"Fractional_error_between_methods",
"Kirchoff",
"KC_method_1_fit",
"KC_method_2_fit")
}
output <- output
}
fit[[5]] <- meltR.F(data[[5]],
K_error = c(0.5, 0.5),
low_K = 0.01,
K_range = c(10, 50), #need to apply a custom K range to this data Kd = 5 to 500 nM
Save_results = "all",
file_path = "Helix_E",
file_prefix = "Helix_E")
fit[[5]] <- meltR.F(data[[5]],
K_error = c(0.5, 0.5),
low_K = 0.01,
K_range = c(5, 50), #need to apply a custom K range to this data Kd = 5 to 500 nM
Save_results = "all",
file_path = "Helix_E",
file_prefix = "Helix_E")
fit[[5]] <- meltR.F(data[[5]],
K_error = c(0.5, 0.5),
low_K = 0.01,
K_range = c(10, 500), #need to apply a custom K range to this data Kd = 5 to 500 nM
Save_results = "all",
file_path = "Helix_E",
file_prefix = "Helix_E")
fit[[5]]$K$Kd <- (10^9)/(fit[[5]]$K$K)
fit[[5]]$K$SE.lnK <- fit[[5]]$K$SE.K/fit[[5]]$K$K
fit[[5]]$K
plot(fit[[5]]$Temperature, fit[[5]]$K)
plot(fit[[5]]$K$Temperature, fit[[5]]$K$Kd)
plot(fit[[5]]$K$Temperature, log(fit[[5]]$K$Kd, 10))
q()
remove.packages("devtools")
install.packages("devtools")
remove.packages("MeltR")
remove.packages("MeltR")
devtools::document()
q()
setwd("~/Jacob/Research/js5-2021/js5001_Purify_FAM-OLIGOs_for_thermodynamics")
setwd("~/Jacob/Research/js5-2021/js5001_Purify_FAM-OLIGOs_for_thermodynamics")
library(tidyverse)
list.files()
list.files("Chromatogram_data")
con = file("Chromatogram_data/js5001_210121_FAM_F_1_16684.arw")
read_lines(con)
close(con)
read.csv("Chromatogram_data/js5001_210121_FAM_F_1_16684.arw")
list.files("Chromatogram_data")
list.files("Chromatogram_data/280nM_data")
read.csv("Chromatogram_data/280nM_data/js5001_210121_FAM_F_1_16684.arw")
list.files("Chromatogram_data/280nM_data")
read.csv("Chromatogram_data/280nM_data/js5001_210121_FAM_F_1_16682.arw")
df <- read.csv(x)
x = "Chromatogram_data/280nM_data/js5001_210121_FAM_F_1_16682.arw"
df <- read.csv(x)
strsplit("x")
strsplit(x)
strsplit(x, split = "_")
which(paste("Chromatogram_data/280nM_data", list.files("Chromatogram_data/280nM_data"), sep = "/") == x)
df$Injection <- which(paste("Chromatogram_data/280nM_data", list.files("Chromatogram_data/280nM_data"), sep = "/") == x)
paste("Chromatogram_data/280nM_data", list.files("Chromatogram_data/280nM_data")
paste("Chromatogram_data/280nM_data", list.files("Chromatogram_data/280nM_data"), sep = "/")
paste("Chromatogram_data/280nM_data", list.files("Chromatogram_data/280nM_data"), sep = "/")
list.df.280 <- lapply(paste("Chromatogram_data/280nM_data", list.files("Chromatogram_data/280nM_data"), sep = "/"), FUN = read.chromatogram.280)
read.chromatogram.280 = function(x){
df <- read.csv(x)
colnames(df) <- c("Time", "Absorbance")
df$RNA <- paste(strsplit(x, split = "_")[[1]][5], strsplit(x, split = "_")[[1]][5], sep = "-")
df$Injection <- which(paste("Chromatogram_data/280nM_data", list.files("Chromatogram_data/280nM_data"), sep = "/") == x)
output <- df
}
list.df.280 <- lapply(paste("Chromatogram_data/280nM_data", list.files("Chromatogram_data/280nM_data"), sep = "/"), FUN = read.chromatogram.280)
df.280 <- bind_rows(list.df.280)
head(df.280)
read.chromatogram.280 = function(x){
df <- read.csv(x)[-1,]
colnames(df) <- c("Time", "Absorbance")
df$RNA <- paste(strsplit(x, split = "_")[[1]][5], strsplit(x, split = "_")[[1]][5], sep = "-")
df$Injection <- which(paste("Chromatogram_data/280nM_data", list.files("Chromatogram_data/280nM_data"), sep = "/") == x)
df$Time <- as.numeric(df$Time)
df$Absorbance <- as.numeric(df$Absorbance)
output <- df
}
list.df.280 <- lapply(paste("Chromatogram_data/280nM_data", list.files("Chromatogram_data/280nM_data"), sep = "/"), FUN = read.chromatogram.280)
df.280 <- bind_rows(list.df.280)
head(df.280)
read.chromatogram.280 = function(x){
df <- read.csv(x)[-1,]
colnames(df) <- c("Time", "Absorbance")
df$RNA <- paste(strsplit(x, split = "_")[[1]][5], strsplit(x, split = "_")[[1]][5], sep = "-")
df$Injection <- which(paste("Chromatogram_data/280nM_data", list.files("Chromatogram_data/280nM_data"), sep = "/") == x)
df$Time <- as.numeric(as.character(df$Time))
df$Absorbance <- as.numeric(as.character(df$Absorbance))
output <- df
}
list.df.280 <- lapply(paste("Chromatogram_data/280nM_data", list.files("Chromatogram_data/280nM_data"), sep = "/"), FUN = read.chromatogram.280)
df.280 <- bind_rows(list.df.280)
head(df.280)
ggplot(df.280, aes(x = Time, y = Absorbance)) +
geom_line()
ggplot(df.280, aes(x = Time, y = Absorbance, group = Injection)) +
geom_line()
ggplot(df.280, aes(x = Time, y = Absorbance, group = Injection, color = RNA)) +
geom_line()
x = "Chromatogram_data/280nM_data/js5001_210121_FAM_F_1_16682.arw"
df <- read.csv(x)[-1,]
colnames(df) <- c("Time", "Absorbance")
df$RNA <- paste(strsplit(x, split = "_")[[1]][5], strsplit(x, split = "_")[[1]][5], sep = "-")
df$Injection <- which(paste("Chromatogram_data/280nM_data", list.files("Chromatogram_data/280nM_data"), sep = "/") == x)
df$Injection
x = "Chromatogram_data/280nM_data/js5001_210121_FAM_F_1_16682.arw"
read.chromatogram.280 = function(x){
df <- read.csv(x)[-1,]
colnames(df) <- c("Time", "Absorbance")
df$RNA <- paste(strsplit(x, split = "_")[[1]][5], strsplit(x, split = "_")[[1]][6], sep = "-")
df$Injection <- which(paste("Chromatogram_data/280nM_data", list.files("Chromatogram_data/280nM_data"), sep = "/") == x)
df$Time <- as.numeric(as.character(df$Time))
df$Absorbance <- as.numeric(as.character(df$Absorbance))
output <- df
}
list.df.280 <- lapply(paste("Chromatogram_data/280nM_data", list.files("Chromatogram_data/280nM_data"), sep = "/"), FUN = read.chromatogram.280)
df.280 <- bind_rows(list.df.280)
head(df.280)
ggplot(df.280, aes(x = Time, y = Absorbance, group = Injection, color = RNA)) +
geom_line()
ggplot(df.280, aes(x = Time, y = Absorbance, group = Injection, color = RNA)) +
geom_line() +
scale_color_manual(values = viridis::viridis(length(unique(df.280$RNA))))
ggplot(df.280, aes(x = Time, y = Absorbance, group = Injection, color = RNA)) +
geom_line() +
scale_color_manual(values = viridis::viridis(length(unique(df.280$RNA)))) +
theme_classic()
ggsave("280_nm_chromatogram.png", scale = 2.5, height = 4, height = 3)
ggsave("280_nm_chromatogram.png", scale = 2.5, width = 4, height = 3)
head(df.280)
read.chromatogram.280 = function(x){
df <- read.csv(x)[-1,]
colnames(df) <- c("Time", "Absorbance")
df$RNA <- paste(strsplit(x, split = "_")[[1]][5], strsplit(x, split = "_")[[1]][6], sep = "-")
df$Injection <- which(paste("Chromatogram_data/470nM_data", list.files("Chromatogram_data/470nM_data"), sep = "/") == x)
df$Time <- as.numeric(as.character(df$Time))
df$Absorbance <- as.numeric(as.character(df$Absorbance))
output <- df
}
list.df.280 <- lapply(paste("Chromatogram_data/470nM_data", list.files("Chromatogram_data/470nM_data"), sep = "/"), FUN = read.chromatogram.280)
list.df.470 <- lapply(paste("Chromatogram_data/470nM_data", list.files("Chromatogram_data/470nM_data"), sep = "/"), FUN = read.chromatogram.280)
df.470 <- bind_rows(list.df.470)
head(df.470)
ggplot(df.470, aes(x = Time, y = Absorbance, group = Injection, color = RNA)) +
geom_line() +
scale_color_manual(values = viridis::viridis(length(unique(df.280$RNA)))) +
theme_classic()
ggsave("470_nm_chromatogram.png", scale = 2.5, width = 4, height = 3)
read.chromatogram.280 = function(x){
df <- read.csv(x)[-1,]
colnames(df) <- c("Time", "Absorbance")
df$RNA <- paste(strsplit(x, split = "_")[[1]][5], strsplit(x, split = "_")[[1]][6], sep = "-")
df$Injection <- which(paste("Chromatogram_data/280nM_data", list.files("Chromatogram_data/280nM_data"), sep = "/") == x)
df$Time <- as.numeric(as.character(df$Time))
df$Absorbance <- as.numeric(as.character(df$Absorbance))
output <- df
}
list.df.280 <- lapply(paste("Chromatogram_data/280nM_data", list.files("Chromatogram_data/280nM_data"), sep = "/"), FUN = read.chromatogram.280)
df.280 <- bind_rows(list.df.280)
head(df.280)
ggplot(df.280, aes(x = Time, y = Absorbance, group = Injection, color = RNA)) +
geom_line() +
scale_color_manual(values = viridis::viridis(length(unique(df.280$RNA)))) +
theme_classic()
ggsave("280_nm_chromatogram.png", scale = 2.5, width = 4, height = 3)
read.chromatogram.470 = function(x){
df <- read.csv(x)[-1,]
colnames(df) <- c("Time", "Absorbance")
df$RNA <- paste(strsplit(x, split = "_")[[1]][5], strsplit(x, split = "_")[[1]][6], sep = "-")
df$Injection <- which(paste("Chromatogram_data/470nM_data", list.files("Chromatogram_data/470nM_data"), sep = "/") == x)
df$Time <- as.numeric(as.character(df$Time))
df$Absorbance <- as.numeric(as.character(df$Absorbance))
output <- df
}
list.df.470 <- lapply(paste("Chromatogram_data/470nM_data", list.files("Chromatogram_data/470nM_data"), sep = "/"), FUN = read.chromatogram.470)
df.470 <- bind_rows(list.df.470)
head(df.470)
ggplot(df.470, aes(x = Time, y = Absorbance, group = Injection, color = RNA)) +
geom_line() +
scale_color_manual(values = viridis::viridis(length(unique(df.280$RNA)))) +
theme_classic()
ggsave("470_nm_chromatogram.png", scale = 2.5, width = 4, height = 3)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
vector.seqF = c("FAM", vector.seqF)
seqF = "UGCCUUAG"
seqR = "CUAAGGCA"
output = "df"
F.Q = FALSE
Fluor = "FAM"
Qunecher = "BHQ1"
AA.UU = -0.9
AU.AU = -1.1
UA.UA = -1.3
CU.AG = -2.1
CA.UG = -2.1
GU.AC = -2.2
GA.UC = -2.1
CG.CG = -2.4
GG.CC = -3.3
GC.GC = -3.4
Initiation = 4.09
Term.AU = 0.45
FAMC.GBHQ1 = -3.93
FAMU.ABHQ1 = -3.0
Symmetry = 0.43
vector.seqF = strsplit(seqF, split = "")[[1]]
vector.seqR = strsplit(seqR, split = "")[[1]]
if (F.Q){
vector.seqF = c("FAM", vector.seqF)
vector.seqR = c("BHQ1", vector.seqR)
}
F.Q = TRUE
if (F.Q){
vector.seqF = c("FAM", vector.seqF)
vector.seqR = c("BHQ1", vector.seqR)
}
vector.terms = c()
for (i in 1:(length(vector.seqF) - 1)){
vector.terms[i] = paste(vector.seqF[i], vector.seqF[i+1], ".", rev(vector.seqR)[i+1], rev(vector.seqR)[i], sep = "")
}
AU.term = FALSE
vector.seqF[length(vector.seqF)] == "A"
if(vector.seqF[length(vector.seqF)] == "A"){
AU.term = TRUE
}
if(vector.seqF[length(vector.seqF)] == "U"){
AU.term = TRUE
}
if (AU.term){
vector.terms = c("Term.AU", vector.terms)
}
AU.start = FALSE
if(vector.seqF[1] == "A"){
AU.term = TRUE
}
if(vector.seqF[1] == "U"){
AU.term = TRUE
}
if (AU.term){
vector.terms = c("Term.AU", vector.terms)
}
vector.terms
seqF = "UGCCUUAG"
seqR = "CUAAGGCA"
vector.seqF = strsplit(seqF, split = "")[[1]]
vector.seqR = strsplit(seqR, split = "")[[1]]
if (F.Q){
vector.seqF = c("FAM", vector.seqF)
vector.seqR = c(vector.seqR, "BHQ1")
}
vector.terms = c()
for (i in 1:(length(vector.seqF) - 1)){
vector.terms[i] = paste(vector.seqF[i], vector.seqF[i+1], ".", rev(vector.seqR)[i+1], rev(vector.seqR)[i], sep = "")
}
AU.term = FALSE
if(vector.seqF[length(vector.seqF)] == "A"){
AU.term = TRUE
}
if(vector.seqF[length(vector.seqF)] == "U"){
AU.term = TRUE
}
if (AU.term){
vector.terms = c("Term.AU", vector.terms)
}
AU.start = FALSE
if(vector.seqF[1] == "A"){
AU.term = TRUE
}
if(vector.seqF[1] == "U"){
AU.term = TRUE
}
if (AU.term){
vector.terms = c("Term.AU", vector.terms)
}
if (F.Q){
vector.terms = c("FAMC.GBHQ1", vector.terms)
}
vector.terms = c("Initiation", vector.terms)
if (seqF == seqR){
vector.terms = c("Symmetry", vector.terms)
}
vector.terms
vector.seqF = strsplit(seqF, split = "")[[1]]
vector.seqR = strsplit(seqR, split = "")[[1]]
if (F.Q){
vector.seqF = c("FAM", vector.seqF)
vector.seqR = c(vector.seqR, "BHQ1")
}
vector.terms = c()
for (i in 1:(length(vector.seqF) - 1)){
vector.terms[i] = paste(vector.seqF[i], vector.seqF[i+1], ".", rev(vector.seqR)[i+1], rev(vector.seqR)[i], sep = "")
}
AU.term = FALSE
if(vector.seqF[length(vector.seqF)] == "A"){
AU.term = TRUE
}
if(vector.seqF[length(vector.seqF)] == "U"){
AU.term = TRUE
}
if (AU.term){
vector.terms = c("Term.AU", vector.terms)
}
AU.start = FALSE
if(vector.seqF[1] == "A"){
AU.term = TRUE
}
if(vector.seqF[1] == "U"){
AU.term = TRUE
}
if (AU.term){
vector.terms = c("Term.AU", vector.terms)
}
vector.terms = c("Initiation", vector.terms)
if (seqF == seqR){
vector.terms = c("Symmetry", vector.terms)
}
vector.terms
for (i in 1:length(vector.terms)){
if(vector.terms[i] == "UU.AA"){ #1
vector.terms[i] = "AA.UU"
}
if(vector.terms[i] == "AG.CU"){ #2
vector.terms[i] = "CU.AG"
}
if(vector.terms[i] == "UG.CA"){ #3
vector.terms[i] = "CA.UG"
}
if(vector.terms[i] == "AC.GU"){ #4
vector.terms[i] = "GU.AC"
}
if(vector.terms[i] == "UC.GA"){ #5
vector.terms[i] = "GA.UC"
}
if(vector.terms[i] == "CC.GG"){ #5
vector.terms[i] = "GG.CC"
}
}
for (i in 2:length(vector.terms)){
if (i == 2){
string.formula = paste(vector.terms[i-1], vector.terms[i], sep = " + ")
}else{
string.formula = paste(string.formula, vector.terms[i], sep = " + ")
}
}
df.param = data.frame(AA.UU = length(which(vector.terms == "AA.UU")), #UU.AA 1
AU.AU = length(which(vector.terms == "AU.AU")), #AU.AU
UA.UA = length(which(vector.terms == "UA.UA")), #UA.UA
CU.AG = length(which(vector.terms == "CU.AG")), #AG.CU 2
CA.UG = length(which(vector.terms == "CA.UG")), #UG.CA 3
GU.AC = length(which(vector.terms == "GU.AC")), #AC.GU 4
GA.UC = length(which(vector.terms == "GA.UC")), #UC.GA 5
CG.CG = length(which(vector.terms == "CG.CG")), #CG.CG
GG.CC = length(which(vector.terms == "GG.CC")), #CC.GG 6
GC.GC = length(which(vector.terms == "GC.GC")), #GC.GC
Term.AU = length(which(vector.terms == "Term.AU")),
FAMC.GBHQ1 = length(which(vector.terms == "FAMC.GBHQ1")),
Symmetry = length(which(vector.terms == "Symmetry")),
Initiation = 1)
df.param = data.frame(AA.UU = length(which(vector.terms == "AA.UU")), #UU.AA 1
AU.AU = length(which(vector.terms == "AU.AU")), #AU.AU
UA.UA = length(which(vector.terms == "UA.UA")), #UA.UA
CU.AG = length(which(vector.terms == "CU.AG")), #AG.CU 2
CA.UG = length(which(vector.terms == "CA.UG")), #UG.CA 3
GU.AC = length(which(vector.terms == "GU.AC")), #AC.GU 4
GA.UC = length(which(vector.terms == "GA.UC")), #UC.GA 5
CG.CG = length(which(vector.terms == "CG.CG")), #CG.CG
GG.CC = length(which(vector.terms == "GG.CC")), #CC.GG 6
GC.GC = length(which(vector.terms == "GC.GC")), #GC.GC
Term.AU = length(which(vector.terms == "Term.AU")),
FAMC.GBHQ1 = length(which(vector.terms == "FAMC.GBHQ1")),
FAMC.GBHQ1 = length(which(vector.terms == "FAMU.ABHQ1")),
Symmetry = length(which(vector.terms == "Symmetry")),
Initiation = 1)
df.param
string.formula
fold.E = eval(parse(text = string.formula))
fold.E
print(fold.E)
install.packages("gitcreds")
library(gitcreds)
gitcreds_set()
usethis::create_github_token()
gitcreds_set()
